#!/bin/bash

debug=0

if [[ $debug -eq 0 ]]; then
	debug=2
else debug=''
fi

# input params
IPSEC_PSK=''
VPN_USER=''
PASSWORD=''

# check root
if [ $(id -u) != 0 ]; then
	echo 'Please start script whith root!'
	exit 0
fi

# check version of linux
if [[ $(uname --release | grep 'alt') != $(uname --release) ]]; then
	echo 'This version linux not altlinux!'
	exit 0
fi

# ??? installing requires
choose_inst_deps() {
	echo ''
	while [[ true ]]; do
		echo -n "This script installing requireses. Choose [y|n]: "
		read item
		case $item in
			[Yy]* ) break;;
			[Nn]* ) exit 0;;
		esac
	done
}

# genering key for IPSEC_PSK
genering_key() {
	echo -n 'Please input string (min 10 char): '
	in_str='simple'
	while [[ true ]]; do
		read in_str
		if [[ $(expr length $in_str 2>/dev/null) -le 10 ]]; then
			echo -n 'Inputed string low 10 char -> '
		else break
		fi
	done
	IPSEC_PSK=$(echo $in_str | sha512sum)
	l=$(expr length "$IPSEC_PSK")
	let "l = $l-2"
	IPSEC_PSK=$(expr substr "$IPSEC_PSK" 1 $l)
	IPSEC_PSK=$(python py_scr.py 'genering_key' $IPSEC_PSK)
	echo $IPSEC_PSK > IPSEC_PSK.key
	echo 'Key generated succusseful!'
	break
}

# ??? genering key
while [[ true ]]; do
	echo -n 'Must genering IPSEC_PSK?[y|n]: '
	read item
	case $item in
		[Yy]* ) genering_key;;
		[Nn]* )	break;;
	esac
done

# read vpn name
read -p 'Please enter you user(vpn) name: ' VPN_USER

if [[ $VPN_USER == '' ]]; then
	VPN_USER='vpn'
	echo "Your login is default $VPN_USER"
else echo "Your vpn name is $VPN_USER"
fi

# read vpn password
echo -n 'Please enter password (min 8 char): '
pass='1234'
while [[ true ]]; do
	read -s pass
	if [[ $(expr length $pass 2>/dev/null) -le 8 ]]; then
		echo ''
		echo -n 'Inputed password low 8 char -> '
	else
		PASSWORD=$pass
		break
	fi
done

choose_inst_deps

# instalation requires
inst_deps() {
	rm -f /var/cache/apt/archives/lock
	echo 'Update cahce for apt...'
	apt-get clean
	apt-get update > /dev/null
	echo 'Chacked and installing dependencies...'
	apt-get install wget net-tools -y > /dev/null
}

inst_deps

# getting public ip adress
get_pub_ip() {
	echo 'Please choose type of connection:'
	echo '4) IPv4'
	echo '6) IPv6'

	while [[ true ]]; do
		echo -n '-> '
		read ip_type
		case $ip_type in
			[4]* ) PUBLICIP=$(wget -q -O - http://ipv4.wtfismyip.com/text); break;;
			[6]* ) PUBLICIP=$(wget -q -O - http://ipv6.wtfismyip.com/text); break;;
		esac
	done

	echo 'Getting public ip adress...'
	if [[ "x$PUBLICIP" == "x" ]]; then
		echo 'Error of check your ip-addres. Please, input ip manually.'
		while [[ true ]]; do
			echo -n 'ip-> '
			read man_ip
			if [[ $(expr length $man_ip) -lt 7 ]]; then
				echo 'Incorrect format ip-address'
			else
				PUBLICIP=$man_ip
				break
			fi
		done
	fi
	sleep 1
	echo 'Public ip getted succussefully!'
}

get_pub_ip

sleep 1
# geting private ip adress
echo 'Getting private ip...'
{
	PRIVATEIP=$(hostname -i 2>/dev/null)
} || {
	PRIVATEIP=$(ifconfig | sed -n '2 p' | sed 's/.*inet.*dr://;s/ B.*//')
}
sleep 1
echo 'Private ip getted succussefully!'

deps_for_ipsec() {
	sleep 1
	echo 'Installing dependencies for ipsec...'
	sleep 1

	apt-get install gmp gmp-devel flex bison nss nspr gcc7 >/dev/null

	rm -f /usr/bin/cc
	ln -s /usr/bin/gcc-7 /usr/bin/cc

	echo 'Now installing OpenSwan for source...'
	sleep 1
	echo 'Downloading OpenSwan...'
	wget -q https://download.openswan.org/openswan/openswan-latest.tar.gz
	tar -xvf openswan-latest.tar.gz >/dev/null
	cd openswan-2.6.50
	echo 'Compiling...'
	make programs >/dev/null $(echo $debug)>/dev/null
	echo 'Installing...'
	make install >/dev/null
}

deps_for_ipsec

echo 'Now will be configurating files.'