#!/bin/bash

# input parameters
DATADIR='/etc/easy-ipsec/'
INITROOT='init'
IPSEC_PSK=''
REMOTEIP=''
IPSECTYPE=''
STRONGSWANDIR='/etc/strongswan'
SUNSUB=''
MOONSUB=''
TYPENET=''
OSRELEASE='/etc/os-release'

exec 3>/dev/null

# check root
if [ $(id -u) != 0 ]; then
	echo 'Please start script with root!'
	exit 1
fi

# check datadir
if [[ ! -x "$path" ]]; then
	mkdir $DATADIR

if [[ $5 == '--checkoff' ]]; then
	STRONGSWANDIR=/etc
fi

# check linux distribution
if [[ $5 != '--checkoff' ]]; then
	if [[ -z $(cat $OSRELEASE | grep '^NAME=' | sed 's/.*=//') 1>&3 2>&3 ]]; then
		echo 'Unknown linux distribution!'
		exit 1
	fi
fi

# init function
init_fun() {
	rm -rf $DATADIR
	mkdir $DATADIR$INITROOT
	touch $DATADIR$INITROOT/init
}

if [[ $1 == '--reboot' && $2 != '' ]]; then
	echo 'Option reboot can not have other parameters!'
	exit 1
fi

if [[ $1 == '--start' && $2 != '' ]]; then
	echo 'Option reboot can not have other parameters!'
	exit 1
fi

# reboot function
reboot_fun() {
	if [[ $(ls $DATADIR | grep $INITROOT) != '' ]]; then
		if [[ $(ls $DATADIR$INITROOT | grep ipsec.*) != '' ]]; then
			sleep 0.5
			echo 'Parameters will be installed to default'
			mv $STRONGSWANDIR/ipsec.conf $STRONGSWANDIR/ipsec.conf.old 2>&3
			mv $STRONGSWANDIR/ipsec.secrets $STRONGSWANDIR/ipsec.secrets.old 2>&3
			rm -f $STRONGSWANDIR/ipsec.conf
			rm -f $STRONGSWANDIR/ipsec.secrets
			cp -f $DATADIR$INITROOT/ipsec.* $STRONGSWANDIR
			ipsec restart 1>&3 2>&3
			echo "IPsec is started! Use the 'etcnet-ipsec up'"
			exit 0
		else
			echo 'Init-file not found. Please run script with --init'
			exit 1
		fi
	else
		echo -n 'Init-file not found! Init now? '
		while [[ true ]]; do
			echo -n '[Y|n]-> '
			read key
			if [[ -z key ]]; then
				echo -n 'The key should not be empty!-> '
			else
				case $key in
					[Yy]* ) init_fun; break;;
					[Nn]* ) exit 1;;
				esac
			fi
		done
	fi
}

start_fun() {
	ipsec restart 1>&3 2>&3
	sleep 3
	if [[ $(ls $DATADIR | grep $INITROOT) != '' ]]; then
		if [[ $(ls $DATADIR$INITROOT | grep ipsec.*) != '' ]]; then
			if [[ $(ipsec up net-net | grep failed) != '' ]]; then
				echo 'failed!'
			else
				echo 'Successful!'
				sleep 1
				ipsec status
			fi
		fi
	else
		echo 'Ipsec not configured!'
		exit 1
	fi
}

stop_fun() {
	echo 'Stopping the tunnel connection...'
	ipsec restart
}

# 5 param
while [[ -n $5 ]]; do
	case $5 in
		--debug ) exec 3>&1; break;;
		--checkoff ) break;;
		* ) echo "Unknown parameter '$5'"; exit 0;
	esac
done

# 4 param
if [[ $4 == '' && $1 != '--reboot' && $1 != '--start' ]]; then
	echo 'The parameter should not be empty!'
	exit 1
else
	REMOTEIP=$4
fi

# 3 param
if [[ $3 == '' && $1 != '--reboot' && $1 != '--start' ]]; then
	echo 'The parameter should not be empty!'
	exit 1
else
	while [[ -n $3 ]]; do
		case $3 in
			--moon ) TYPENET='moon'; MOONSUB='10.1.0.0/16'; SUNSUB='10.2.0.0/16'; break;;
			--sun ) TYPENET='sun'; MOONSUB='10.2.0.0/16'; SUNSUB='10.1.0.0/16'; break;;
			* ) echo "Unknown parameter '$3'"; exit 0;;
		esac
	done
fi

# 2 param
if [[ $2 == '' && $1 != '--reboot' && $1 != '--start' ]]; then
	echo 'The parameter should not be empty!'
	exit 1
else
	while [[ -n $2 ]]; do
		case $2 in
			--psk ) IPSECTYPE='psk'; break;;
			--cer ) IPSECTYPE='cer'; break;;
			* ) echo "Unknown parameter '$2'"; exit 0;;
		esac
	done
fi

# 1 param
if [[ -z $1 ]]; then
	echo 'The parameter should not be empty!'
	exit 1
else
	while [[ -n $1 ]]; do
		case $1 in
			--init ) init_fun; break;;
			--reboot ) reboot_fun; break;;
			--start ) start_fun; exit 0;;
			* ) echo "Unknown parameter '$1'"; exit 0;;
		esac
	done
fi

# generating key for IPSEC PSK
genering_key() {
	echo -n 'Please enter random symbols (min 10): '
	in_str='simple'
	while [[ true ]]; do
		read in_str
		if [[ $(expr length $in_str 2>&3) -le 10 ]]; then
			echo -n 'Minimum length 10 symbols! -> '
		else break
		fi
	done
	IPSEC_PSK=$(echo $in_str | sha512sum)
	l=$(expr length "$IPSEC_PSK")
	let "l = $l-2"
	IPSEC_PSK=$(expr substr "$IPSEC_PSK" 1 $l)
	IPSEC_PSK=$(python py_scr.py 'genering_key' $IPSEC_PSK)
	echo $IPSEC_PSK > $DATADIR$INITROOT/IPSEC_PSK.key
	sleep 0.5
	echo 'The key was successfully generated!'
}

sleep 0.5

if [[ $IPSECTYPE == 'psk' && $TYPENET == 'moon' ]]; then
	genering_key
fi

if [[ $5 != '--checkoff' ]]; then
	# installing dependencies
	rm -f /var/cache/apt/archives/lock
	rm -f /var/lib/apt/lists/lock
	sleep 0.5
	echo 'Check dependencies...'
	apt-get clean
	apt-get update 1>&3 2>&3
	deps=(wget net-tools flex gperf libcap-devel libcurl-devel libgmp-devel \
			libldap-devel libpam0-devel libssl-devel libxml2-devel easy-rsa)

	for item in ${deps[*]}
	do
		if [[ -z $(rpm -qa $item) ]]; then
			apt-get install -y $item 1>&3 2>&3
		fi
	done
fi

# getting public ip address
get_pub_ip() {
	echo 'Getting public ip address...'
	PUBLICIP=$(wget -q -O - http://ipv4.wtfismyip.com/text)
	if [[ "x$PUBLICIP" == "x" ]]; then
		echo 'Eror of receiving a public address! Enter the address manually.'
		while [[ true ]]; do
			echo -n 'ip-> '
			read man_ip
			if [[ $(expr length $man_ip) -lt 7 ]]; then
				echo 'Incorrect format ip-address!'
			else
				PUBLICIP=$man_ip
				break
			fi
		done
	fi
	sleep 0.5
	echo 'Public ip address successfully received!'
}

get_pub_ip

sleep 0.5

# getting private ip address
echo 'Getting private ip address...'
{
	PRIVATEIP=$(hostname -i 2>&3)
} || {
	PRIVATEIP=$(ifconfig | sed -n '2 p' | sed 's/.*inet.*dr://;s/ B.*//')
}
sleep 0.5
echo 'Private ip address successfully received!'

# generating certificates
gen_cer() {
	echo 'Generating certificates...'
	pushd $DATADIR$INITROOT 1>&3
	check_dir=$(ls | grep easy-rsa-ipsec)
	if [[ -z $check_dir ]]; then
		git clone https://github.com/ValdikSS/easy-rsa-ipsec 1>&3 2>&3
	fi
	cd easy-rsa-ipsec/easyrsa3/
	rm -rf pki
	./easyrsa init-pki 1>&3 2>&3
	echo | ./easyrsa build-ca nopass 1>&3 2>&3
	./easyrsa build-server-full $PUBLICIP nopass 1>&3 2>&3
	./easyrsa build-server-full $REMOTEIP nopass 1>&3 2>&3
	./easyrsa export-p12 $REMOTEIP nopass 1>&3 2>&3
	mv pki/issued/$PUBLICIP.crt $STRONGSWANDIR/ipsec.d/certs
	mv pki/private/$PUBLICIP.key $STRONGSWANDIR/ipsec.d/private
	popd 1>&3
}

if [[ $IPSECTYPE == 'cer' ]]; then
	gen_cer
fi

echo 'Configuring files...'

# saving old conf and secret files
pushd $STRONGSWANDIR 1>&3
mv ipsec.conf ipsec.conf.old
mv ipsec.secrets ipsec.secrets.old
touch ipsec.conf
touch ipsec.secrets
popd 1>&3

# saving parameters...
cat > $DATADIR$INITROOT/init <<EOF
$IPSECTYPE
$REMOTEIP
$IPSEC_PSK
''
EOF
pushd $DATADIR$INITROOT 1>&3
rm -f ipsec.*
cp -f $STRONGSWANDIR/ipsec.conf .
cp -f $STRONGSWANDIR/ipsec.secrets .
popd 1>&3

psk_method() {
	if [[ $IPSECTYPE == 'psk' ]]; then
		echo 'Configuring settings for PSK authorization...'
		cat > $STRONGSWANDIR/ipsec.conf <<EOF
config setup

conn %default
	ikelifetime=60m
	keylife=20m
	rekeymargin=3m
	keyingtries=1
	authby=secret
	fragmentation=yes
	keyexchange=ikev2
	mobike=no

conn net-net
	left=$PRIVATEIP
	leftid=@$PUBLICIP
	leftsubnet=$MOONSUB
	leftfirewall=yes
	right=$REMOTEIP
	rightid=@$REMOTEIP
	rightsubnet=$SUNSUB
	auto=add
EOF

		sleep 0.5
		cat > $STRONGSWANDIR/ipsec.secrets <<EOF
@$PUBLICIP @$REMOTEIP : PSK $IPSEC_PSK
EOF
	fi
}

psk_method

cer_method() {
	if [[ $IPSECTYPE == 'cer' ]]; then
		echo 'Configuring settings for CER authorization...'
		cat > $STRONGSWANDIR/ipsec.conf <<EOF
config setup

conn %default
	ikelifetime=60m
	keylife=20m
	rekeymargin=3m
	keyingtries=1
	fragmentation=yes
	keyexchange=ikev2
	mobike=no

conn net-net
	left=$PRIVATEIP
	leftcert=$PUBLICIP.crt
	leftid=@$PUBLICIP
	leftsubnet=$MOONSUB
	leftfirewall=yes
	right=$REMOTEIP
	rightid=@$REMOTEIP
	rightsubnet=$SUNSUB
	auto=add
EOF

		sleep 0.5
		cat > $STRONGSWANDIR/ipsec.secrets <<EOF
: RSA $PUBLICIP.key
EOF
	fi
}

cer_method

# configuring firewall
conf_firewall() {
	echo 'Configuring firewall...'
	iptables -P INPUT ACCEPT
	iptables -P FORWARD ACCEPT
	iptables -F
	iptables -Z
	iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A INPUT -p tcp --dport 22 -j ACCEPT
	iptables -A INPUT -i lo -j ACCEPT
	iptables -A INPUT -p udp --dport  500 -j ACCEPT
	iptables -A INPUT -p udp --dport 4500 -j ACCEPT
	iptables -A INPUT -j DROP
	iptables -A FORWARD -j DROP

	mv /etc/sysctl.conf /etc/sysctl.conf.old
	rm -f /etc/sysctl.conf
	touch /etc/sysctl.conf
	cat > /etc/sysctl.conf <<EOF
net.ipv4.ip_forward=1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.ip_no_pmtu_disc = 1
EOF
}

if [[ $IPSECTYPE == 'cer' ]]; then
	mv $DATADIR$INITROOT/$REMOTEIP.p12 .
	chmod 664 $REMOTEIP.p12
	echo "Move '$REMOTEIP.p12' from this directory to a second server"
fi

if [[ $IPSECTYPE == 'psk' && $TYPENET == 'moon' ]]; then
	mv $DATADIR$INITROOT/IPSEC_PSK.key .
	chmod 664 IPSEC_PSK.key
	echo "Move '.key' from this directory to a second server"
fi

conf_firewall

if [[ $1 != '--reboot' ]]; then
	ipsec restart 1>&3 2>&3
fi

echo 'IPsec started!'
